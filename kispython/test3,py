import struct

# Открываем файл для чтения бинарных данных
with open('data.bin', 'rb') as f:
    # Считываем сигнатуру
    signature = struct.unpack_from('5B', f.read(5))

    # Проверяем, что считанная сигнатура совпадает с ожидаемой
    expected_signature = (0xf8, 0x55, 0x48, 0x47, 0x58)
    if signature != expected_signature:
        raise ValueError('Invalid signature')

    # Считываем поля структуры
    # Считываем поля структуры A
    a_fields = struct.unpack_from('i H 6s B i I h 8H', f.read(), 0)

    a_field1 = a_fields[0]
    a_field2_offset = a_fields[1]
    a_field3 = a_fields[2].decode('utf-8')
    a_field4 = a_fields[3]
    a_field5 = a_fields[4]
    a_field6_offset = a_fields[5]
    a_field7 = a_fields[6]
    a_field8 = a_fields[7:]
    # Считываем поля структуры B
    b_field1, b_field3_offset, b_field4 = struct.unpack_from(
        'b h I', f.read(), a_field2_offset)
    b_field2_offset = a_field2_offset + struct.calcsize('b')

    # Считываем поля структуры C
    c_field1_offset, c_field2, c_field3_offset = struct.unpack_from(
        'H i I', f.read(), b_field3_offset)

    # Считываем поля структуры D
    d_fields = []
    d_offset = c_field1_offset
    for _ in range(a_field4):
        d_field1, d_field2, d_field3, d_field4 = struct.unpack_from(
            'H B h q', f.read(), d_offset)
        d_fields.append((d_field1, d_field2, d_field3, d_field4))
        d_offset += struct.calcsize('H B h q')

    # Считываем поля структуры E
    e_field1, e_field2, e_field3 = struct.unpack_from(
        'H 2Q b', f.read(), a_field6_offset)
    # Считываем оставшиеся поля структуры E
    e_field2_offset = a_field6_offset + struct.calcsize('H Q b')

    e_field2 = []
    for _ in range(2):
        e_field2_value = struct.unpack_from('Q', f.read(), e_field2_offset)[0]
        e_field2.append(e_field2_value)
        e_field2_offset += struct.calcsize('Q')

    e_field3 = struct.unpack_from('b', f.read(), e_field2_offset)[0]
    # Закрываем файл
    f.close()
